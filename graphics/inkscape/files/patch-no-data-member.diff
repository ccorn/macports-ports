--- src/color-profile.cpp.orig	2017-01-02 10:44:59.000000000 +0100
+++ src/color-profile.cpp	2017-01-14 00:49:47.000000000 +0100
@@ -939,7 +939,12 @@ Glib::ustring getNameFromProfile(cmsHPRO
         std::vector<char> data(byteLen);
         cmsUInt32Number readLen = cmsGetProfileInfoASCII(profile, cmsInfoDescription,
                                                          "en", "US",
-                                                         data.data(), data.size());
+#if __cplusplus < 201103L
+                                                         &data[0],
+#else
+                                                         data.data(),
+#endif
+                                                         data.size());
         if (readLen < data.size()) {
             data.resize(readLen);
         }
--- src/ui/tools/pencil-tool.cpp.orig	2017-01-02 10:44:59.000000000 +0100
+++ src/ui/tools/pencil-tool.cpp	2017-01-14 11:40:30.000000000 +0100
@@ -655,7 +655,11 @@ void PencilTool::_interpolate() {
 
     std::vector<Geom::Point> b(max_segs);
 
+#if __cplusplus < 201103L
+    int const n_segs = Geom::bezier_fit_cubic_r(&b[0], &this->ps[0], n_points, tolerance_sq, max_segs);
+#else
     int const n_segs = Geom::bezier_fit_cubic_r(b.data(), this->ps.data(), n_points, tolerance_sq, max_segs);
+#endif
 
     if (n_segs > 0) {
         /* Fit and draw and reset state */
@@ -729,7 +733,11 @@ void PencilTool::_sketchInterpolate() {
 
     std::vector<Geom::Point> b(max_segs);
 
+#if __cplusplus < 201103L
+    int const n_segs = Geom::bezier_fit_cubic_r(&b[0], &this->ps[0], n_points, tolerance_sq, max_segs);
+#else
     int const n_segs = Geom::bezier_fit_cubic_r(b.data(), this->ps.data(), n_points, tolerance_sq, max_segs);
+#endif
 
     if (n_segs > 0) {
         Geom::Path fit(b[0]);
--- src/2geom/solve-bezier-parametric.cpp.orig	2017-01-02 10:44:59.000000000 +0100
+++ src/2geom/solve-bezier-parametric.cpp	2017-01-14 04:12:22.000000000 +0100
@@ -68,10 +68,17 @@ find_parametric_bezier_roots(Geom::Point
     //    Right[degree+1];	/* control polygons  */
     std::vector<Geom::Point> Left( degree+1 ), Right(degree+1);
 
+#if __cplusplus < 201103L
+    casteljau_subdivision(0.5, w, &Left[0], &Right[0], degree);
+    total_subs ++;
+    find_parametric_bezier_roots(&Left[0],  degree, solutions, depth+1);
+    find_parametric_bezier_roots(&Right[0], degree, solutions, depth+1);
+#else
     casteljau_subdivision(0.5, w, Left.data(), Right.data(), degree);
     total_subs ++;
     find_parametric_bezier_roots(Left.data(),  degree, solutions, depth+1);
     find_parametric_bezier_roots(Right.data(), degree, solutions, depth+1);
+#endif
 }
