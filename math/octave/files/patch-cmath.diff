--- ./libinterp/corefcn/quadcc.cc.orig	2017-04-05 07:37:35.000000000 +0200
+++ ./libinterp/corefcn/quadcc.cc	2017-04-05 07:38:04.000000000 +0200
@@ -1644,7 +1644,7 @@ Mathematical Software, Vol. 37, Issue 3,
       wrap = true;
       for (i = 0; i < nivals + 1; i++)
         if (octave::math::isinf (iivals[i]))
-          iivals[i] = std::copysign (1.0, iivals[i]);
+          iivals[i] = octave::math::copysign (1.0, iivals[i]);
         else
           iivals[i] = 2.0 * atan (iivals[i]) / M_PI;
     }
@@ -1982,7 +1982,7 @@ Mathematical Software, Vol. 37, Issue 3,
                                   && ivl->c[0] / iv->c[0] > 2);
           if (ivl->ndiv > ndiv_max && 2 * ivl->ndiv > ivl->rdepth)
             {
-              igral = std::copysign (octave::numeric_limits<double>::Inf (), igral);
+              igral = octave::math::copysign (octave::numeric_limits<double>::Inf (), igral);
               warning ("quadcc: divergent integral detected");
               break;
             }
@@ -2073,7 +2073,7 @@ Mathematical Software, Vol. 37, Issue 3,
                                   && ivr->c[0] / iv->c[0] > 2);
           if (ivr->ndiv > ndiv_max && 2 * ivr->ndiv > ivr->rdepth)
             {
-              igral = std::copysign (octave::numeric_limits<double>::Inf (), igral);
+              igral = octave::math::copysign (octave::numeric_limits<double>::Inf (), igral);
               warning ("quadcc: divergent integral detected");
               break;
             }
--- ./liboctave/numeric/lo-mappers.cc.orig	2017-04-05 07:37:35.000000000 +0200
+++ ./liboctave/numeric/lo-mappers.cc	2017-04-05 07:45:03.000000000 +0200
@@ -230,8 +230,8 @@ namespace octave
 #endif
     }
 
-    double log2 (double x) { return std::log2 (x); }
-    float log2 (float x) { return std::log2 (x); }
+    double log2 (double x) { return ::log2 (x); }
+    float log2 (float x) { return ::log2f (x); }
 
     Complex
     log2 (const Complex& x)
@@ -315,8 +315,8 @@ namespace octave
 #endif
     }
 
-    double copysign (double x, double y) { return std::copysign (x, y); }
-    float copysign (float x, float y) { return std::copysign (x, y); }
+    double copysign (double x, double y) { return ::copysign (x, y); }
+    float copysign (float x, float y) { return ::copysignf (x, y); }
 
     double signbit (double x) { return std::signbit (x); }
     float signbit (float x) { return std::signbit (x); }
@@ -324,14 +324,14 @@ namespace octave
     bool negative_sign (double x) { return __lo_ieee_signbit (x); }
     bool negative_sign (float x) { return __lo_ieee_float_signbit (x); }
 
-    double trunc (double x) { return std::trunc (x); }
-    float trunc (float x) { return std::trunc (x); }
+    double trunc (double x) { return ::trunc (x); }
+    float trunc (float x) { return ::truncf (x); }
 
     double floor (double x) { return std::floor (x); }
     float floor (float x) { return std::floor (x); }
 
-    double round (double x) { return std::round (x); }
-    float round (float x) { return std::round (x); }
+    double round (double x) { return ::round (x); }
+    float round (float x) { return ::roundf (x); }
 
     double frexp (double x, int *expptr)
     {
