PortSystem              1.0
PortGroup               compilers 1.0
PortGroup               muniversal 1.0

categories              math
license                 BSD
name                    atlas
version                 3.11.3
revision                4
use_bzip2               yes

# additional versions
set lapackversion       3.4.2
set lapackname          lapack
set atlasdist           ${name}${version}${extract.suffix}
set lapackdist          ${lapackname}-${lapackversion}.tgz

maintainers             {vince @Veence}
platforms               darwin

description             Portable optimal linear algebra software
long_description        Provides a complete BLAS and LAPACK API.\
                        ATLAS achieves performance on par\
                        with machine-specific tuned libraries.

# No precompiled binaries
#archive_sites
homepage                http://math-atlas.sourceforge.net/

master_sites            sourceforge:math-atlas:atlas \
                        http://www.netlib.org/lapack:lapack

distfiles               ${atlasdist}:atlas \
                        ${lapackdist}:lapack
extract.only            ${atlasdist}
patchfiles              patch-atlcomp_txt.diff \
                        patch-emit_mm_c.diff \
                        patch-ATL_cmm4x4x128_av_c.diff

checksums               atlas3.11.3.tar.bz2 \
sha1 6a7be81c3f651e0de3c8cb783767f3ebddfc3adf \
sha256 e32ce421f4bba4fc1185b7b5c7d8e9dfc71c2e25d81611279e1d44c256aa654d \
                        lapack-3.4.2.tgz \
rmd160  8740c35c9a85b71424fe1ffeed192256aebeb431 \
sha256  60a65daaf16ec315034675942618a2230521ea7adf85eea788ee54841072faf0

variant nofortran       description {Forgo use of fortran compiler} {
}

configure.ccache        no

compilers.setup         -gcc44
# compiler.setup does not set configure.compiler, but we need it
# for proper archflags and to avoid weird fallbacks when blacklisting.
if {[info exists cdb([c_variant_name],compiler)]} {
    configure.compiler.add_deps no
    configure.compiler  $cdb([c_variant_name],compiler)
    compiler.blacklist  gcc-3.3 gcc-4.0 gcc-4.2 llvm-gcc-4.2 clang \
                        apple-gcc-4.0 apple-gcc-4.2 macports-llvm-gcc42
}

# Select proper gcc version (or clang)
# The clang compiler bundled with Xcode < 4.3 is not suitable for
# Atlas compiling.

if {[variant_isset gcc45]} {
    set gccversion  4.5
} elseif {[variant_isset gcc46] || [variant_isset dragonegg]} {
    set gccversion  4.6
} elseif {[variant_isset gcc47]} {
    set gccversion  4.7
} elseif {[variant_isset gcc48]} {
    set gccversion  4.8
} elseif {[variant_isset gcc49]} {
    set gccversion  4.9
} elseif {[variant_isset gcc5]} {
    set gccversion  5
} elseif {[variant_isset gcc6]} {
    set gccversion  6
} elseif {[variant_isset gcc7]} {
    set gccversion  7
}
#if {[vercmp $xcodeversion 4.3] < 0} {

if {(${os.major} > 10 && \
        (![catch {sysctl hw.optional.avx1_0} result1] && $result1 == 1)) ||
        (![catch {sysctl hw.cpufamily} result2] && $result2 == 1418770316)} {

    set has_avx "yes"
} else {

    set has_avx "no"
}

# If none of the above variants is chosen, make gcc5 the default for
# up to SSE4.2 (Core i1) capable processors, and Xcode-clang for newer

if {![variant_isset gcc49] && ![variant_isset gcc5] && ![variant_isset mpclang37]} {

    if {${has_avx} == "no"} {
        # Defaults to gcc5
        default_variants    +gcc5
        set gcc_version     5
        set use_clang       ""
    } else {

        # Use an appropriate version of Clang
        set gcc_version     0    
        if {[vercmp ${xcodeversion} 6.0] >= 0} {
        # With Xcode 5.0+, defaults to Xcode-clang
            set use_clang       "Xcode"
        } else {
            # Otherwise use Macports clang 3.7
            default_variants    +mpclang37
            set use_clang       "37"
        }
    }
}

depends_build           port:bzip2 \
                        port:gzip

if {![info exists gccversion]} {
    set use_clang   1
}

# No cross-compilation possible

if {${os.arch} == "i386"} {
    set universal_archs_supported {i386 x86_64}
} else {
    set universal_archs_supported {ppc  ppc64}
}

# Use include/lib paths via environment CPATH, LIBRARY_PATH only
configure.cppflags
configure.ldflags

# Use this for use in shared libs
configure.cflags-append -fPIC

configure.args \
    --with-netlib-lapack-tarfile=${distpath}/${lapackdist} \
    -O 12 \
    -v 2 \
    --dylibs

# If we use gcc >= 46, add OpenMP support
if {[info exists gccversion] && ${gccversion} > 4.5} {
    configure.cflags-append -fopenmp
    configure.args-append   -Si omp 1 
}

# Dragonegg

if {[variant_isset dragonegg]} {
    configure.cflags-append -fplugin=${prefix}/lib/dragonegg46.so
}

# Add the appropriate configure flag to specify if we do
# or don’t have a fortran compiler

if {[variant_isset nofortran]} {

    configure.args-append   --nof77
}

if {${build_arch} == "ppc" && ![variant_isset universal]} {

    # On Leopard, we may warn the user that ppc is not as efficient as ppc64
    if {${os.major} == 9} {

        pre-configure {

            if {![catch {sysctl hw.cpu64bit_capable} result] && \
                $result == 1} {

                ui_msg "Compiling for ppc on a ppc64 machine."
                ui_msg "This could lead to inferior performance."
            }
        }
    }
}

# MacPorts defaults to ppc on G4 and G5, so we must override 64-bit
# detection by Atlas, even if we are on a G5

eval lappend merger_configure_args(ppc)     -C acg '${configure.cc} -m32'\
                                            -b 32 \
                                            -A 4 \
                                            -V 4 \
                                            -t 4 \
                                            -s gas_ppc \
                                            -Fa alg ' ${configure.cflags} -m32\
					    -force_cpusubtype_ALL'

eval lappend merger_configure_args(ppc64)   -C acg '${configure.cc} -m64'\
                                            -b 64 \
                                            -A 5 \
                                            -V 4 \
                                            -t 4 \
                                            -s gas_ppc \
                                            -Fa alg '${configure.cflags} -m64\
					    -force_cpusubtype_ALL'

eval lappend merger_configure_args(i386)    -C acg '${configure.cc} -m32'\
                                            -b 32 \
                                            -A 24 \
                                            -s gas_x86_32 \
                                            -Fa alg '${configure.cflags} -m32'

eval lappend merger_configure_args(x86_64)  -C acg '${configure.cc} -m64'\
                                            -b 64 \
                                            -s gas_x86_64 \
                                            -Fa alg '${configure.cflags} -m64'

if {(${os.major} >= 11 && \
     ![catch {sysctl hw.optional.avx1_0} result1] && \
     $result1 == 1) || \
    (${os.major} > 8 && \
     ![catch {sysctl hw.cpufamily} result2] && \
     $result2 == 1418770316)} {
    
    # Core i2 processors (AVX)
    # AVX instruction can’t be used with GCC because Apple bundled as(1)
    # does not support it. Use clang instead.
    
    if {![info exists use_clang]} {
    
        # Force Core i1 arch
        pre-fetch {
            ui_warn "GCC compilers do not support AVX."
        }
        lappend merger_configure_args(x86_64)   -A 25
    }
}

if {[variant_isset universal]} {

    configure.universal_args-delete --disable-dependency-tracking

} else {
    eval configure.args-append   $merger_configure_args($build_arch)
}

extract {
    # extract Atlas and move to a consistent working directory name
    system -W ${workpath}   "bunzip2 -dc ${distpath}/${atlasdist} | \
                             gnutar --no-same-owner -xf -"
    system  "mv ${workpath}/ATLAS ${workpath}/${name}-${version}"
}

post-patch {
    if { ${build_arch} == "ppc" || ${build_arch} == "ppc64" } {
        reinplace \
        "s|cMVFLAGS=\\\\\"%s\\\\\"|cMVFLAGS=\\\\\"-force_cpusubtype_ALL\ %s\\\\\"|" \
         ${worksrcpath}/include/atlas_mvtesttime.h
    }
}

# Change the default compilers
pre-configure {

    set cc [lindex [split ${configure.cc} '/'] end]

    # Make gcc-mp-x and gfortran-mp-x be detected as GCC variants
    if {[info exists gccversion]} {
        set ff [lindex [split ${configure.f77} '/'] end]
        reinplace "s|-MPGCC-|${cc}|
                   s|-MPFORTRAN-|${ff}|
                   s|-MPPATH-|${prefix}/bin|" \
         ${worksrcpath}/CONFIG/src/probe_comp.c
        if {${build_arch} == "ppc"} {

            reinplace "s|XXX|'${cc}' '-O3 -maltivec \
                        -mabi=altivec -mcpu=7400 -mtune=7400 \
                        -fno-schedule-insns \
                        -fschedule-insns2'|" \
                ${worksrcpath}/CONFIG/src/atlcomp.txt
        } elseif {${build_arch} == "ppc64"} {

            reinplace "s|XXX|'${cc}' '-O3 -maltivec \
                        -mabi=altivec -mcpu=970 -mtune=970 \
                        -mvrsave -mpowerpc64 \
                        -fno-schedule-insns \
                        -fno-schedule-insns2'|" \
                ${worksrcpath}/CONFIG/src/atlcomp.txt
        } else {

            reinplace "s|XXX|'${cc}' '-fomit-frame-pointer \
                        -mfpmath=sse -msse3 -O2 \
                        -fno-schedule-insns2'|" \
                ${worksrcpath}/CONFIG/src/atlcomp.txt
        }
    } else {
        reinplace "s|XXX|'${cc}' '-Oz -fomit-frame-pointer'|" \
            ${worksrcpath}/CONFIG/src/atlcomp.txt
    }

    # Forces goodgcc

    reinplace "s|GOODGCC = %s\",.*);|GOODGCC = %s\", \"${configure.cc}\");|" \
        ${worksrcpath}/CONFIG/src/SpewMakeInc.c

    # If we use clang, we must grasp a gfortran compiler to build
    # Fortran sources (do not impact overall Atlas performance)

    if {[info exists use_clang]} {
        ui_msg "Use of clang is still experimental and may result in\
                reduced performance or misbehavior. Use with caution."
    }

    if {[info exists use_clang] && ![variant_isset nofortran]} {

        set gflist  [glob -noc ${prefix}/bin/gfortran-mp-*]
        
        if {[llength ${gflist}] == 0} {

            # No fortran compiler found. Act as if +nofortran was set.
            ui_msg "No fortran compiler found. \
                    Disabling fortran interface."
            configure.args-append   --nof77
        } else {

            # Select most recent gfortran
            global gccnumber

            configure.f77   [lindex [lsort -dec ${gflist}] 0]
            set gccnumber    \
                [join [split [string range [file tail ${configure.f77}] 12 end] "."] ""]
            ui_msg "Selected gfortran${gccnumber}."
        }
    }

    # Select the proper gfortran and corresponding libgfortran library
    if {[info exists gccnumber] && ![variant_isset nofortran]} {

        configure.args-append   -C if ${configure.f77}
        set libgfbasepath       ${prefix}/lib/gcc${gccnumber}
        if {[variant_isset universal]} {

            foreach arch ${universal_archs_to_use} {

                set libgfarchpath    ${libgfbasepath}/${arch}            
                if {[file exists ${libgfarchpath}/libgfortran.dylib]} {

                    lappend merger_configure_args($arch) \
                         -Ss f77lib ${libgfarchpath}/libgfortran.dylib
                } else {

                    lappend merger_configure_args($arch) \
                        -Ss f77lib ${libgfbasepath}/libgfortran.dylib
                }
            }
        } else {

            configure.args-append    -Ss f77lib \
                ${libgfbasepath}/libgfortran.dylib
        }
    }

    # Create build trees
    if {[variant_isset universal]} {
        foreach arch ${universal_archs_to_use} {
            copy ${workpath}/${name}-${version} \
             ${workpath}/${name}-${version}-${arch}
        }
    }

    reinplace    "s|cc=gcc|cc=${configure.cc}|g" ${worksrcpath}/configure
    reinplace    "s|-no-cpp-precomp||g" \
                 ${workpath}/${name}-${version}/CONFIG/src/atlcomp.txt

    # Get some system specific variables for maximum optimization
    set cpufreq [expr {[sysctl hw.cpufrequency]/1000000}]
    ui_debug    "Setting CPU Frequency for: ${cpufreq}"

    if {${os.arch} == "powerpc"} {
        configure.args-append    -D c -DWALL
    } else {
        configure.args-append    -D c -DPentiumCPS=${cpufreq}
    }

    if {[variant_isset universal]} {
        foreach arch ${universal_archs_to_use} {
            file mkdir ${workpath}/${name}-${version}-${arch}/build
        }
    } else {
        file mkdir ${workpath}/${name}-${version}/build
    }
}

# We configure from the build directory
configure.dir            ${workpath}/${name}-${version}/build
configure.cmd            ../configure

post-configure {
    if {[variant_isset universal]} {
    
        set         archs ${universal_archs_to_use}
    } else {
    
        set         archs ${build_arch}
    }

    foreach arch ${archs} {
        if {![variant_isset universal]} {

            set     atlas_path ${workpath}/${name}-${version}
        } else {

            set     atlas_path ${workpath}/${name}-${version}-${arch}
        }

#        # Recursively remove directories
#        ui_debug    "patch to recursively remove directories on clean"
#        reinplace   "s|rm -f|rm -rf|g" ${atlas_path}/build/Makefile

        reinplace {s,^LIBTOOL *=.*,LIBTOOL=$(GCC) $(GCCFLAGS),
                   s,libtool ,\$(LIBTOOL) ,g
                   s,\$(LIBTOOL) -dynamic ,\$(LIBTOOL) -dynamiclib ,} \
            ${atlas_path}/build/lib/Makefile
    }
}

build.env-append        CC=${configure.cc} CXX=${configure.cxx}
use_parallel_build      no
build.target            build
build.dir               ${workpath}/${name}-${version}/build

post-build {
    if {! [variant_isset universal]} {
        system "cd ${build.dir}/lib && ${build.cmd} shared_all"
    } else {
        foreach arch ${universal_archs_to_use} {
            system "cd ${workpath}/${name}-${version}-${arch}/build/lib && \
                    ${build.cmd} shared_all"
        }
    }
}

destroot.dir          ${build.dir}
destroot.destdir      DESTDIR=${destroot}${prefix}

livecheck.name        math-atlas
livecheck.distname    Stable
