# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:filetype=tcl:et:sw=4:ts=4:sts=4

PortSystem 1.0
PortGroup select 1.0
PortGroup compiler_blacklist_versions 1.0

name                gcc48

# Whenever this port is bumped for version/revision, please revbump dragonegg-3.4-gcc-4.8
epoch               2
version             4.8.5
revision            3
platforms           darwin
categories          lang
maintainers         nomaintainer
# an exception in the license allows dependents to not be GPL
license             {GPL-3+ Permissive}
description         The GNU compiler collection
long_description    The GNU compiler collection, including front ends for \
                    C, C++, Objective-C, Objective-C++, Fortran and Java.

homepage            http://gcc.gnu.org/
master_sites        ftp://ftp.funet.fi/pub/mirrors/sources.redhat.com/pub/gcc/releases/gcc-${version}/ \
                    ftp://ftp.gwdg.de/pub/linux/gcc/releases/gcc-${version}/ \
                    ftp://gcc.ftp.nluug.nl/mirror/languages/gcc/releases/gcc-${version}/ \
                    ftp://gcc.gnu.org/pub/gcc/releases/gcc-${version}/ \
                    gnu:gcc/gcc-${version}

distname            gcc-${version}
use_bzip2           yes

checksums           rmd160  98e84aa59bd668c4ab58afea9c7a2d1cc0c6ef7e \
                    sha256  22fb1e7e0f68a63cee631d85b20461d1ea6bda162f03096350e38c8d427ecf23

depends_lib         port:cctools \
                    path:lib/pkgconfig/cloog-isl.pc:cloog \
                    port:gmp \
                    port:isl14 \
                    port:ld64 \
                    path:lib/libgcc/libgcc_s.1.dylib:libgcc \
                    port:libiconv \
                    port:libmpc \
                    port:mpfr
depends_run         port:gcc_select \
                    port:libgcc6

depends_skip_archcheck-append gcc_select ld64 cctools
license_noconflict  gmp mpfr ppl libmpc

# Handle OS X deployment targets correctly (GCC PR target/63810
# <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63810>).
patchfiles-append   macosx-version-min.patch

# Don't link with "-flat_namespace -undefined suppress" on Yosemite and
# later (#45483).
patchfiles-append   yosemite-libtool.patch

# See https://trac.macports.org/ticket/52393
patchfiles-append   patch-gcc-texi.diff

# See https://trac.macports.org/ticket/53662
patchfiles-append   patch-libisl.diff
post-extract {
    xinstall -d -m 0755 ${build.dir}/gcc
    ln -s ${prefix}/libexec/isl14/include/isl ${build.dir}/gcc
}

set major           [join [lrange [split ${version} .-] 0 1] .]

platform darwin {
    configure.pre_args-append --build=${build_arch}-apple-darwin${os.major}
}

configure.dir       ${workpath}/build
configure.cmd       ${worksrcpath}/configure
configure.args      --enable-languages=c,c++,objc,obj-c++,lto,fortran,java \
                    --libdir=${prefix}/lib/${name} \
                    --includedir=${prefix}/include/${name} \
                    --infodir=${prefix}/share/info \
                    --mandir=${prefix}/share/man \
                    --datarootdir=${prefix}/share/gcc-${major} \
                    --with-local-prefix=${prefix} \
                    --with-system-zlib \
                    --disable-nls \
                    --program-suffix=-mp-${major} \
                    --with-gxx-include-dir=${prefix}/include/${name}/c++/ \
                    --with-gmp=${prefix} \
                    --with-mpfr=${prefix} \
                    --with-mpc=${prefix} \
                    --with-isl=${prefix}/libexec/isl14 --disable-isl-version-check \
                    --with-cloog=${prefix} --disable-cloog-version-check \
                    --enable-stage1-checking \
                    --disable-multilib \
                    --enable-lto \
                    --enable-libstdcxx-time \
                    --with-build-config=bootstrap-debug \
                    --with-as=${prefix}/bin/as \
                    --with-ld=${prefix}/bin/ld \
                    --with-ar=${prefix}/bin/ar \
                    --with-bugurl=https://trac.macports.org/newticket

# see https://lists.macports.org/pipermail/macports-dev/2017-August/036209.html
# --disable-tls does not limit functionality
# it only determines how std::call_once works
configure.args-append \
                    --disable-tls

configure.env-append \
                    AR_FOR_TARGET=${prefix}/bin/ar \
                    AS_FOR_TARGET=${prefix}/bin/as \
                    LD_FOR_TARGET=${prefix}/bin/ld \
                    NM_FOR_TARGET=${prefix}/bin/nm \
                    OBJDUMP_FOR_TARGET=${prefix}/bin/objdump \
                    RANLIB_FOR_TARGET=${prefix}/bin/ranlib \
                    STRIP_FOR_TARGET=${prefix}/bin/strip \
                    OTOOL=${prefix}/bin/otool \
                    OTOOL64=${prefix}/bin/otool

if {${os.platform} eq "darwin" && ${os.major} > 16} {
    depends_lib
    depends_run
    archive_sites
    pre-fetch {
        ui_error "${name} is not supported on macOS High Sierra and newer"
        return -code error {unsupported platform}
    }
}

eval configure.cmd {PATH="\${ADABOOT+\$ADABOOT/bin:}\$PATH"} ${configure.cmd}
eval build.cmd {PATH="\${ADABOOT+\$ADABOOT/bin:}\$PATH"} ${build.cmd}
pre-configure {
    configure.args-append --with-pkgversion="MacPorts ${name} ${version}_${revision}${portvariants}"

    if {${configure.sdkroot} ne ""} {
        # We should be using --with-build-sysroot here.  Using --with-sysroot
        # changes the behavior of the installed gcc to look in that sysroot
        # by default instead of /.  Using --with-build-sysroot is supposed
        # to be used during the build but not impact the installed product.
        # Unfortunately, the build fails because the value doesn't get
        # plumbed everywhere it is supposed to.
        #
        # https://trac.macports.org/ticket/53726
        # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=79885
        #
        # Note that macports toolchains will fail to compile gcc unless
        # the DevSDK is installed due to another gcc build system bug:
        # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80203
        configure.args-append --with-sysroot="${configure.sdkroot}"
    }

    # TODO: Remove when base automatically creates configure.dir (2.2.1?).
    file mkdir ${configure.dir}
}

# http://trac.macports.org/ticket/29067
compiler.blacklist-append gcc-4.0

# http://trac.macports.org/ticket/29104
compiler.blacklist-append {llvm-gcc-4.2 < 2336.1}

# Recent versions of Clang emit inconsistent DWARF CIE version
# information, causing bootstrap comparison failures (#47410). The
# offending compilers are:
#   - Apple LLVM 6.1.0 (clang-602.0.49)
#   - clang-3.7 @3.7-r234122
#   - clang-3.6 @3.6.0_0
#   - clang-3.5 @3.5.1_3
pre-configure {
    if {(${configure.compiler} eq "clang"
                && [compiler_blacklist_versions._version_matches clang >= 602.0.49])
            || [string match {macports-clang-3.[567]} ${configure.compiler}]} {
        configure.args-append --with-build-config=bootstrap-debug
    }
}

# "-stdlib" would be passed on to the bootstrap compiler if present
configure.cxx_stdlib

build.dir           ${configure.dir}
build.target        bootstrap-lean
use_parallel_build  yes

destroot.target     install install-info-host

post-destroot {
    file delete ${destroot}${prefix}/share/info/dir

    foreach file [glob ${destroot}${prefix}/share/{info,man/man7}/*] {
        set extension [file extension ${file}]
        set newfile [regsub "${extension}$" ${file} "-mp-${major}${extension}"]

        file rename ${file} ${newfile}
    }

    foreach dylib {libgcc_ext.10.4.dylib libgcc_ext.10.5.dylib libgcc_s.1.dylib libgfortran.3.dylib libquadmath.0.dylib libstdc++.6.dylib libobjc-gnu.4.dylib libgomp.1.dylib libitm.1.dylib libssp.0.dylib libasan.0.dylib libatomic.1.dylib} {
        # Different OS versions (e.g. Leopard) or architectures (e.g. PPC) don't produce all the dylibs
        # https://trac.macports.org/ticket/40098
        # https://trac.macports.org/ticket/40100
        if {[file exists ${destroot}${prefix}/lib/${name}/${dylib}]} {
            delete ${destroot}${prefix}/lib/${name}/${dylib}
            ln -s ${prefix}/lib/libgcc/${dylib} ${destroot}${prefix}/lib/${name}/${dylib}
        }

        if {[variant_isset universal]} {
            foreach archdir [glob ${destroot}${prefix}/lib/${name}/*/] {
                if {[file exists ${archdir}/${dylib}]} {
                    delete ${archdir}/${dylib}
                    ln -s ${prefix}/lib/libgcc/${dylib} ${archdir}/${dylib}
                }
            }
        }
    }
    move ${destroot}${prefix}/lib/${name}/pkgconfig/libgcj-${major}.pc ${destroot}${prefix}/lib/pkgconfig/
}

select.group        gcc
select.file         ${filespath}/mp-${name}

variant ada description {Build GNAT, requires some GNAT for bootstrapping} {
    configure.args-replace --enable-languages=c,c++,objc,obj-c++,lto,fortran,java \
                           --enable-languages=c,c++,objc,obj-c++,lto,fortran,java,ada
    configure.ccache no
}
#
# Ada is the only language apart from C which is self hosted - meaning: you need
# an ada compiler to compile ada. hence it is just a variant.
#
variant macada requires ada conflicts gnat gnatgpl gnuada \
    description "Uses MacAda compiler (http://www.macada.org) to bootstrap"	{
    set bootprefix /usr/local/ada-4.3
    if {![file executable ${bootprefix}/bin/gnat]} {
        ui_msg "####################################################################"
        ui_msg "#  Ada is self hosted (http://en.wikipedia.org/wiki/Self-hosting)  #"
        ui_msg "#                                                                  #"
        ui_msg "#  Bootstrap compiler not found. Please download and install from  #"
        ui_msg "#  http://www.macada.org                                           #"
        ui_msg "####################################################################"
    }
    configure.cc                ${bootprefix}/bin/gcc
    configure.cpp               ${bootprefix}/bin/cpp
    #configure.cxx              ${bootprefix}/bin/g++
    configure.objc              ${bootprefix}/bin/gcc
    configure.env-append        ADABOOT=${bootprefix}
    configure.env-append        GNATMAKE=${bootprefix}/bin/gnatmake
    configure.env-append        GNATBIND=${bootprefix}/bin/gnatbind
    build.env-append            ADABOOT=${bootprefix}
}

variant gnatgpl	requires ada conflicts gnat gnuada macada \
    description "Uses GNAT/GPL compiler (http://libre.adacore.com) to bootstrap"	{
    set bootprefix /usr/local/gnat-2009
    if {![file executable ${bootprefix}/bin/gnat]} {
        ui_msg "####################################################################"
        ui_msg "#  Ada is self hosted (http://en.wikipedia.org/wiki/Self-hosting)  #"
        ui_msg "#                                                                  #"
        ui_msg "#  Bootstrap compiler not found. Please download and install from  #"
        ui_msg "#  http://libre.adacore.com                                        #"
        ui_msg "####################################################################"
    }
    configure.cc                ${bootprefix}/bin/gcc
    configure.cpp               ${bootprefix}/bin/cpp
    #configure.cxx              ${bootprefix}/bin/g++
    configure.objc              ${bootprefix}/bin/gcc
    configure.env-append        ADABOOT=${bootprefix}
    configure.env-append        GNATMAKE=${bootprefix}/bin/gnatmake
    configure.env-append        GNATBIND=${bootprefix}/bin/gnatbind
    build.env-append            ADABOOT=${bootprefix}
}

variant gnuada requires ada conflicts gnat gnatgpl macada \
    description "Uses the GnuAda (http://gnuada.sourceforge.net/) compiler to bootstrap"	{
    set bootprefix /opt/local
    if {![file executable ${bootprefix}/bin/gnat]} {
        ui_msg "####################################################################"
        ui_msg "#  Ada is self hosted (http://en.wikipedia.org/wiki/Self-hosting)  #"
        ui_msg "#                                                                  #"
        ui_msg "#  Bootstrap compiler not found. Please download and install from  #"
        ui_msg "#  http://gnuada.sourceforge.net                                   #"
        ui_msg "####################################################################"
    }
    configure.cc                ${bootprefix}/bin/gcc-gnat-4.4
    configure.cpp               ${bootprefix}/bin/cpp-gnat-4.4
    configure.cxx               ${bootprefix}/bin/g++-gnat-4.4
    configure.objc              ${bootprefix}/bin/gcc-gnat-4.4
    configure.env-append        ADABOOT=${bootprefix}
    configure.env-append        GNATMAKE=${bootprefix}/bin/gnatmake
    configure.env-append        GNATBIND=${bootprefix}/bin/gnatbind
    build.env-append            ADABOOT=${bootprefix}
}

variant gnat requires ada conflicts gnatgpl gnuada macada \
    description "Uses the MacPorts Ada (http://www.macports.org/) compiler to bootstrap"	{
    if {![file executable ${prefix}/bin/gnat]} {
        ui_msg "####################################################################"
        ui_msg "#  Ada is self hosted (http://en.wikipedia.org/wiki/Self-hosting)  #"
        ui_msg "#                                                                  #"
        ui_msg "#  For the first intital installation you need to choose one       #"
        ui_msg "#  one of the other variants                                       #"
        ui_msg "####################################################################"
    } else {
        ui_msg "######################################################################"
        ui_msg "#  To use this variant you need activate the existing compiler with: #"
        ui_msg "#                                                                    #"
        ui_msg "#  sudo port select --set gcc gnat-gcc                               #"
        ui_msg "######################################################################"
    }
    configure.cc                ${prefix}/bin/gcc
    configure.cpp               ${prefix}/bin/cpp
    configure.cxx               ${prefix}/bin/g++
    configure.objc              ${prefix}/bin/gcc
    configure.env-append        ADABOOT=${prefix}
    configure.env-append        GNATMAKE=${prefix}/bin/gnatmake
    configure.env-append        GNATBIND=${prefix}/bin/gnatbind
    build.env-append            ADABOOT=${prefix}
}

if {[variant_isset ada] && ![variant_isset macada] && ![variant_isset gnatgpl] && ![variant_isset gnuada] && ![variant_isset gnat]} {
    default_variants +gnat
}

# There may be incompatibilities between the native C++ runtime
# and the newer g++ runtimes, particularly related to exception handling.
# Use one or both of +defaultabi4 and +staticlibgcc.
# The first tries to establish compatibility with older ABIs,
# the second tries to make both ABIs coexist peacefully.
variant defaultabi4 description "Use gcc4 compatible ABI" {
    configure.args-append --with-default-libstdcxx-abi=gcc4-compatible
}
variant staticlibgcc description {Always use -static-libgcc to prevent ABI clashes} {
    patchfiles-append   force-static-gcc.patch
}
platform darwin {
    if {${os.major} < 13} {
        if {![variant_isset staticlibgcc]} {
            default_variants +defaultabi4
        }
    }
}
platform powerpc {
    configure.universal_archs ppc ppc64
}
platform i386 {
    configure.universal_archs i386 x86_64
}
variant universal {
    configure.args-delete --disable-multilib
}
# the generated compiler doesn't accept -arch
configure.env-append \
    CPP="${configure.cc} -E" \
    CXXCPP="${configure.cxx} -E"
build.env-append \
    CPP="${configure.cc} -E" \
    CXXCPP="${configure.cxx} -E"
configure.cc_archflags
configure.cxx_archflags
configure.objc_archflags
configure.ld_archflags
configure.universal_cflags
configure.universal_cxxflags
configure.universal_ldflags
configure.universal_args

livecheck.type      regex
livecheck.url       http://ftp.gnu.org/gnu/gcc/
livecheck.regex     gcc-(${major}\\.\[0-9.\]+)/
